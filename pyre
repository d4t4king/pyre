#!/usr/bin/python

import os
import re
import sys
import pprint
import fnmatch
import subprocess

pp = pprint.PrettyPrinter(indent=4)

def find(pattern, path):
	result = []
	for root, dirs, files in os.walk(path):
		for name in files:
			if fnmatch.fnmatch(name, pattern):
				result.append(os.path.join(root, name))
	return result

try:
	import iptc
except Exception, e:
	if "can't find directory with extensions" in str(e):
		print("The python iptables module couldn't find the library it needs.")
        """
		print("Searching could take several minutes....")
		exts = find('libxtables.so.*', '/')
		if len(exts) > 1:
			path = ''
			for x in exts:
				path = os.path.dirname(x)
			print '''
The python-iptables module couldn't find the iptables extensions 
library (libxtables.so.x.y.z).  But I was able to find it at the 
following path.  Export the variable with the following command,
then rerun this script.
'''
			print("export XTABLES_LIBDIR=\"" + path + "\"")
        """
		
listening = []

def main():
    netstat = subprocess.Popen(('netstat', '-antp'), stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    out = subprocess.check_output(('grep', 'LISTEN'), stdin=netstat.stdout)
    #pp.pprint(out)
    print("Getting listening ports.....")
    for l in out.splitlines():
        match = re.search(r'(\w+)\s+\d+\s+\d+\s+[0-9:.]+:(\d+)', str(l))
        if match:
            #print("proto: {0} port: {1}".format(match.group(1), match.group(2)))
            proto = match.group(1)
            port = match.group(2)
            listening.append(proto + ":" + port)
        else:
            print("Didn't match line..." + l)
    #pp.pprint(listening)

    if 'iptc' not in sys.modules:
        print("python-iptables module not loaded.  Wrapping iptables binary.")
    else:
    	# get the existing rules (?)
    	table = iptc.Table(iptc.Table.FILTER)
    	for chain in table.chains:
    		print "====================="
    		print "Chain ", chain.name
    		for rule in chain.rules:
    			print "Rule", "proto:", rule.protocol, "src:", rule.src, "dst:", \
    				rule.dst, "in:", rule.in_interface, "out:", rule.out_interface, 
    	print "====================="

if __name__ == '__main__':
    main()
